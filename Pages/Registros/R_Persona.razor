@page "/persona_Registro"
@page "/persona/{PersonaId:int}"

@inject PersonasBLL personasBLL
@inject NotificationService notificationService
@inject OcupacionesBLL ocupacionBLL

<EditForm Model="persona" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Registro de Personas</h3>
        </div>
        <div class="card-body">
            @*PersonaId*@
            <div class="form-row align-items-center">
                <div class="col">
                    <div class="mb-3">
                        <label>PersonaId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="persona.PersonaId" class="form-control col-4" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-primary" type="button" @onclick="Buscar"> <i
                                        class="oi oi-magnifying-glass" /> </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*Nombres*@
            <div class="mb-3">
                <label>Nombres</label>
                <InputText @bind-Value="persona.NombreCompleto" class="form-control" />
                <ValidationMessage For="@(() => persona.NombreCompleto)" />
            </div>

            @*Direccion*@
            <div class="mb-3">
                <label>Direccion</label>
                <InputText @bind-Value="persona.Direccion" class="form-control" />
                <ValidationMessage For="@(() => persona.Direccion)" />
            </div>

            @*Email*@
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="persona.Email" class="form-control" />
                <ValidationMessage For="@(() => persona.Email)" />
            </div>

            @*FechaNacimiento*@
            <div class="mb-3">
                <label>Fecha De Nacimiento</label>
                <InputDate @bind-Value="persona.FechaNacimiento" class="form-control" />
                <ValidationMessage For="@(() => persona.FechaNacimiento)" />
            </div>

            @*Telefono*@
            <div class="mb-3">
                <label>Telefono</label>
                <InputNumber @bind-Value="persona.Telefono" class="form-control" />
                <ValidationMessage For="@(() => persona.Telefono)" />
            </div>

            @*Balance*@
            <div class="mb-3">
                <label>Balance</label>
                <InputNumber @bind-Value="persona.Balance" class="form-control" />
                <ValidationMessage For="@(() => persona.Balance)" />
            </div>

            <div class="mb-3 col">
                <label>Ocupaciones</label>
                <InputSelect class="form-select" @bind-Value="persona.OcupacionId">
                    @foreach (Ocupaciones ocupacion in listaOcupaciones)
                    {
                        <option value="@ocupacion.OcupacionId">@ocupacion.Descripcion</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-center">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
                <button type="submit" class="btn btn-success"> <i class="oi oi-document" /> Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="oi oi-trash" />
                    Eliminar</button>
            </div>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int PersonaId { get; set; }

    public Personas persona { get; set; } = new Personas();

    public String mensaje { get; set; } = "";
    public List<Ocupaciones> listaOcupaciones { get; set; } = new List<Ocupaciones>();


    protected override async Task OnInitializedAsync()
    {
        if (PersonaId > 0)
        {
            this.persona.PersonaId = PersonaId;
            await this.Buscar();
        }
        listaOcupaciones = await ocupacionBLL.GetList(o => true);
    }

    private async Task Buscar()
    {
        if (persona.PersonaId > 0)
        {
            var encontrado = await personasBLL.Buscar(persona.PersonaId);

            if (encontrado != null)
                this.persona = encontrado;
        }
    }

    public void Nuevo()
    {
        mensaje = "";
        persona = new Personas();
        persona.FechaNacimiento = DateTime.Now;
    }

    bool Validar()
    {
        return true;
    }

    public async Task Guardar()
    {
        if (!Validar())
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Hay errores por favor validar"
            });
        }

        var guardo = await personasBLL.Guardar(persona);
       if  (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
            Nuevo();
        }
    }

    public async void Eliminar()
    {
        var elimino = await personasBLL.Eliminar(persona);
       if (elimino)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Eliminado correctamente"
            });
            Nuevo();

        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}